// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                Int     @id @default(autoincrement())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    refresh_token_expires_in Int?
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@index([userId])
}

model User {
    id            Int       @id @default(autoincrement())
    name          String?
    email         String    @unique
    username      String?   @unique
    bio           String?
    emailVerified DateTime?
    image         String @default("https://nrsstdptogyfvsluloir.supabase.co/storage/v1/object/public/images/images/user-icon.png")
    
    accounts      Account[]
    sessions      Session[]
    ChatRooms             ChatRoom[]
    FriendRequestSent     FriendRequest[] @relation(name: "sender")
    FriendRequestReceived FriendRequest[] @relation(name: "receiver")
    Messages               Message[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    @@unique([identifier, token])
}

model ChatRoom {
    id       Int       @id @default(autoincrement())
    messages Message[]
    users    User[]
}

model Message {
    id         Int      @id @default(autoincrement())
    content    String
    user       User     @relation(fields: [userId], references: [id])
    userId     Int
    chatRoom  ChatRoom @relation(fields: [chatRoomId], references: [id])
    chatRoomId Int
    createdAt  DateTime @default(now())
    @@index([userId])
    @@index([chatRoomId])
}

model FriendRequest {
    id         Int      @id @default(autoincrement())
    sender     User     @relation(name: "sender", fields: [senderId], references: [id])
    senderId   Int
    receiver   User     @relation(name: "receiver", fields: [receiverId], references: [id])
    receiverId Int
    isAccepted Boolean  @default(false)
    createdAt  DateTime @default(now())
    @@index([senderId])
    @@index([receiverId])
}